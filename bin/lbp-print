#!/usr/bin/env ruby
require "bundler/setup"
require "lbp/print"
require 'open-uri'
require 'thor'
require 'yaml'
require 'nokogiri'

module LbpPrintCLI
	class Core < Thor
		desc "version", "ask for lbp-print version"
		def version
			puts Lbp::Print::VERSION
		end
		desc "xslt_package_version_number", "get xslt package version number"
		def xslt_package_version_number(package_path)
			## needed /. after package_path so that I would go into the directory and then get the corrected dir name
			xslt_package_version_number =`cd -P "$( dirname "#{package_path}/." )" && git describe --tags --always`
		end
		desc "source_doc_version_number", "get source doc version number"
		def source_doc_version_number
			sourceversion=`git describe --tags --always`
		end
		desc "tex", "creates latex output"
		option :p, :type => :boolean
		option :output_parent, :default => "examples"
		option :package, :default => "lbp-print-xslt"
		option :type, :default => "critical"
		option :schema, :default => "1.0.0"
		def tex (filename)

			# Initialize config file
			home_dir = ENV['HOME']
			config_file = "#{home_dir}/.lbp-print/config.yaml"
			config = YAML::load_file( config_file )

			# Get config data
			output_base = File.expand_path(config['output_base'])
			xslt_base = File.expand_path(config['xslt_base'])

			# Get parameters

			output_parent =
				if output_parent != nil
					output_parent = output_parent
				elsif config["default_params"] && config["default_params"]["output_parent"]
					config["default_params"] && config["default_params"]["output_parent"]
				else
					options["output_parent"]
				end
			package =
				if package != nil
					package = package
				elsif config["default_params"] && config["default_params"]["package"]
					config["default_params"]["package"]
				else
					options["package"]
				end
			type =
				if type != nil
					type = type
				elsif not Nokogiri::XML(open(File.expand_path("#{filename}.xml"))).xpath("/tei:TEI/tei:text[1]/@type", 'tei' => 'http://www.tei-c.org/ns/1.0').empty?
					Nokogiri::XML(open(File.expand_path("#{filename}.xml"))).xpath("/tei:TEI/tei:text[1]/@type", 'tei' => 'http://www.tei-c.org/ns/1.0').to_s
				elsif config["default_params"] && config["default_params"]["type"]
					config["default_params"]["type"]
				else
					type = "critical"
				end
			schema =
				if schema != nil
					schema = schema
				elsif not Nokogiri::XML(open(File.expand_path("#{filename}.xml"))).xpath("/tei:TEI/tei:teiHeader[1]/tei:encodingDesc[1]/tei:schemaRef[1]/@n", 'tei' => 'http://www.tei-c.org/ns/1.0').empty?
					#get schema id, e.g lbp-critical-1.0.0
					schema_full = Nokogiri::XML(open(File.expand_path("#{filename}.xml"))).xpath("/tei:TEI/tei:teiHeader[1]/tei:encodingDesc[1]/tei:schemaRef[1]/@n", 'tei' => 'http://www.tei-c.org/ns/1.0')
					## get number, e.g. 1.0.0
					schema_full.to_s.split("-").last
				elsif config["default_params"] && config["default_params"]["schema"]
					config["default_params"]["schema"]
				else
					options[:schema]
				end

			puts "==============================="
			puts "Output base is: #{output_base}"
			puts "XSLT base is: #{xslt_base}"

			output_dir = File.expand_path("#{output_base}/#{output_parent}")
			puts "Output directory is: #{output_dir}"

			file_basename = File.basename(filename)
			file_full_path = File.expand_path("#{output_dir}/#{file_basename}/#{file_basename}.tex")

			validating_schema = schema
			transcription_type = type

			xslt_directory = "#{xslt_base}/#{package}"
			xslt = "#{xslt_base}/#{package}/#{validating_schema}/#{transcription_type}.xslt"
			xslt_package_version_number = self.xslt_package_version_number(xslt_directory)

			puts "==============================="
			puts "xslt package version number"
			puts xslt_package_version_number
			puts "==============================="
			puts "source version number"
			source_doc_version_number = self.source_doc_version_number
			puts self.source_doc_version_number


			puts "==============================="
			puts "Begin TEI to LaTeX conversion"
			#`saxon "-s:#{filename}.xml" "-xsl:#{xslt}" "-o:#{output_dir}/#{filename}/$filename.tex" "conversionversion=$conversionversion" "sourceversion=$sourceversion";`
			`saxon "-s:#{filename}.xml" "-xsl:#{xslt}" "-o:#{file_full_path}" "conversionversion=#{xslt_package_version_number}" "sourceversion=#{source_doc_version_number}";`
			puts "creating file: #{file_full_path}"
			puts "End TEI to LaTeX conversion"
			puts "==============================="
			self.tex_clean(file_full_path)

			# render pdf
			if options[:p]
				Dir.chdir(output_dir + "/#{filename}/")
				puts "Creating PDF"
				`pdflatex #{file_full_path}`
			end
		end
		desc "tex_clean", "removes unwanted spaces from output tex file"
		def tex_clean (file_full_path)
			#stream edit for unwanted spaces
			puts "Begin removing unwanted spaces"
			`sed -i.bak -e 's/ \{1,\}/ /g' -e 's/{ /{/g' -e 's/ }/}/g' -e 's/ :/:/g' -e 's/} ,/},/g' -e 's/		 / /g' #{file_full_path}`
			puts "unwanted spaces removed"
		end
	end
end


LbpPrintCLI::Core.start(ARGV)
